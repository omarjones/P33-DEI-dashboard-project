str_detect(Demographic,"computing conferral") ~ "cs_confer",
# k-8
str_detect(Demographic,"k-8 stem magnet school enrollment") ~ "mag_stem_enrol",
# hs
str_detect(Demographic,"magnet hs enrollment") ~ "mag_enrol",
str_detect(Demographic,"hs graduates") ~ "total_grad",
# sat
str_detect(Demographic,"sat exceeds") ~ "sat_math_exceeds",
str_detect(Demographic,"sat exceeds in math") ~ "sat_math_exceeds",
str_detect(Demographic,"sat benchmark") ~ "sat_bench",
str_detect(Demographic,"sat math bench mark ") ~ "sat_math_bench",
str_detect(Demographic,"sat meets and exceeds") ~ "sat_math_meet&exceeds",
# math
str_detect(Demographic,"advanced in math") ~ "math_advc",
str_detect(Demographic,"math advanced") ~ "math_advc",
str_detect(Demographic,"proficient in math") ~ "math_prof",
str_detect(Demographic,"math proficient and above") ~ "math_prof&abov",
str_detect(Demographic,"below basic in math") ~ "math_belowBasic",
str_detect(Demographic,"basic in math") ~ "math_basic",
# employment
str_detect(Demographic,"top 3 highest paying cs jobs") ~ "csjob_t3",
str_detect(Demographic,"employee demographics") ~ "csjob_t11",
str_detect(Demographic,"11 top tech jobs") ~ "csjob_t11",
str_detect(Demographic,"19-24 year olds in tech") ~ "csjob_t11_age19to24",
# internet
str_detect(Demographic,"aged 5-17 number of students without internet access") ~ "NOinternet_age5to17"
)
) %>%
# create educational stage
mutate(var_stage = case_when(str_detect(Demographic,"4th") ~ "k8_4th",
str_detect(Demographic,"5th-8th") ~ "k8_5to8th",
str_detect(Demographic,"8th") ~ "k8_8th",
str_detect(Demographic,"k-8") ~ "k8_total",
str_detect(Demographic,"sat") |
str_detect(Demographic,"ap") |
str_detect(Demographic,"9th-12th") |
str_detect(Demographic,"hs") ~ "hs",
str_detect(Demographic,"college") |
str_detect(Demographic,"universities") |
str_detect(Demographic,"degree") |
str_detect(Demographic,"carnegie mellon") |
str_detect(Demographic,"mit") |
str_detect(Demographic,"stanford") |
str_detect(Demographic,"computing") ~ "col",
str_detect(Demographic,"employment") |
str_detect(Demographic,"employee") |
str_detect(Demographic,"jobs") |
str_detect(Demographic,"tech") ~ "emp")
) %>%
## Create scope var.
mutate(var_scope = case_when(
str_detect(Demographic,"mit") |
str_detect(Demographic,"stanford") |
str_detect(Demographic,"carnegie") ~ "college",
str_detect(Demographic,"msa") |
str_detect(Demographic,"employee") |
str_detect(Demographic,"19-24 year olds in tech workforce") ~ "region_chi_msa",
str_detect(Demographic,"cps") |
str_detect(Demographic,"in math") ~ "city_chi",
str_detect(Demographic,"illinois") |
str_detect(Demographic,"ap cs") |
str_detect(Demographic,"ibhe") |
str_detect(Demographic,"3 year cs/computing") ~ "state_il",
str_detect(Demographic,"usa") |
str_detect(Demographic,"number of students") ~ "usa"
)
) %>%
select(Demographic,var_yr,var_scope,var_stage,var_key,everything())
df_DEI_parametric_label <- df_DEI_parametric_lower %>%
mutate(var_key = case_when(
# uni and top uni
str_detect(Demographic,"usa degree conferra") ~ "total_confer",
str_detect(Demographic,"universities enrollment") ~ "total_enrol",
str_detect(Demographic,"universities 2022 enrollment") ~ "total_enrol",
str_detect(Demographic,"universities conferral") ~ "total_confer",
str_detect(Demographic,"mit enrollment") ~ "t3_mit_total_enrol",
str_detect(Demographic,"mit cs enrollment") ~ "t3_mit_cs_enrol",
str_detect(Demographic,"mellon enrollment") ~ "t3_mellon_total_enrol",
str_detect(Demographic,"carnegie mellon cs enrollment") ~ "t3_mellon_cs_enrol",
str_detect(Demographic,"stanford enrollment") ~ "t3_stanford_total_enrol",
str_detect(Demographic,"stanford cs enrollment") ~ "t3_stanford_cs_enrol",
str_detect(Demographic,"top three illinois universities cs 2021 conferral") ~ "t3_cs_confer",
str_detect(Demographic,"top three usa universities cs conferral") ~ "t3_cs_confer",
str_detect(Demographic,"top three usa universities cs conferral") ~ "t3_cs_confer",
str_detect(Demographic,"top three illinois universities cs 2022 enrollment") ~ "t3_cs_enrol",
# ap cs
str_detect(Demographic,"ap cs pass") ~ "apcs_pass",
str_detect(Demographic,"ap cs enrollment") ~ "apcs_enrol",
str_detect(Demographic,"ap cs enroll") ~ "apcs_enrol",
str_detect(Demographic,"ap cs scored 3 or 4 ") ~ "apcs_score34",
str_detect(Demographic,"ap cs scored 5") ~ "apcs_score5",
# cs
str_detect(Demographic,"offering cs") ~ "cs_classOffered",
str_detect(Demographic,"interest in cs") ~ "cs_interested",
str_detect(Demographic,"cs enrollment") ~ "cs_enrol",
str_detect(Demographic,"cs/computing enrollment") ~ "cs_enrol",
str_detect(Demographic,"cs 2022 enrollment") ~ "cs_enrol",
str_detect(Demographic,"cs 2021 conferral") ~ "cs_confer",
str_detect(Demographic,"cs degree conferral") ~ "cs_confer",
str_detect(Demographic,"cs conferral") ~ "cs_confer",
str_detect(Demographic,"computing conferral") ~ "cs_confer",
# k-8
str_detect(Demographic,"k-8 stem magnet school enrollment") ~ "mag_stem_enrol",
# hs
str_detect(Demographic,"magnet hs enrollment") ~ "mag_enrol",
str_detect(Demographic,"hs graduates") ~ "total_grad",
# sat
str_detect(Demographic,"sat exceeds") ~ "sat_math_exceeds",
str_detect(Demographic,"sat exceeds in math") ~ "sat_math_exceeds",
str_detect(Demographic,"sat benchmark") ~ "sat_bench",
str_detect(Demographic,"sat math bench mark ") ~ "sat_math_bench",
str_detect(Demographic,"sat meets and exceeds") ~ "sat_math_meet&exceeds",
# math
str_detect(Demographic,"advanced in math") ~ "math_advc",
str_detect(Demographic,"math advanced") ~ "math_advc",
str_detect(Demographic,"proficient in math") ~ "math_prof",
str_detect(Demographic,"math proficient and above") ~ "math_prof&abov",
str_detect(Demographic,"below basic in math") ~ "math_belowBasic",
str_detect(Demographic,"basic in math") ~ "math_basic",
# employment
str_detect(Demographic,"top 3 highest paying cs jobs") ~ "csjob_t3",
str_detect(Demographic,"employee demographics") ~ "csjob_t11",
str_detect(Demographic,"11 top tech jobs") ~ "csjob_t11",
str_detect(Demographic,"19-24 year olds in tech") ~ "csjob_t11_age19to24",
# internet
str_detect(Demographic,"aged 5-17 number of students without internet access") ~ "NOinternet_age5to17"
)
) %>%
# create educational stage
mutate(var_stage = case_when(str_detect(Demographic,"4th") ~ "k8_4th",
str_detect(Demographic,"5th-8th") ~ "k8_5to8th",
str_detect(Demographic,"8th") ~ "k8_8th",
str_detect(Demographic,"k-8") ~ "k8_total",
str_detect(Demographic,"college") |
str_detect(Demographic,"universities") |
str_detect(Demographic,"degree") |
str_detect(Demographic,"carnegie mellon") |
str_detect(Demographic,"mit") |
str_detect(Demographic,"stanford") |
str_detect(Demographic,"computing") ~ "col",
str_detect(Demographic,"sat") |
str_detect(Demographic,"ap") |
str_detect(Demographic,"9th-12th") |
str_detect(Demographic,"hs") ~ "hs",
str_detect(Demographic,"employment") |
str_detect(Demographic,"employee") |
str_detect(Demographic,"jobs") |
str_detect(Demographic,"tech") ~ "emp")
) %>%
## Create scope var.
mutate(var_scope = case_when(
str_detect(Demographic,"mit") |
str_detect(Demographic,"stanford") |
str_detect(Demographic,"carnegie") ~ "college",
str_detect(Demographic,"msa") |
str_detect(Demographic,"employee") |
str_detect(Demographic,"19-24 year olds in tech workforce") ~ "region_chi_msa",
str_detect(Demographic,"cps") |
str_detect(Demographic,"in math") ~ "city_chi",
str_detect(Demographic,"illinois") |
str_detect(Demographic,"ap cs") |
str_detect(Demographic,"ibhe") |
str_detect(Demographic,"3 year cs/computing") ~ "state_il",
str_detect(Demographic,"usa") |
str_detect(Demographic,"number of students") ~ "usa"
)
) %>%
select(Demographic,var_yr,var_scope,var_stage,var_key,everything())
df_DEI_parametric_label <- df_DEI_parametric_lower %>%
mutate(var_key = case_when(
# uni and top uni
str_detect(Demographic,"usa degree conferra") ~ "total_confer",
str_detect(Demographic,"universities enrollment") ~ "total_enrol",
str_detect(Demographic,"universities 2022 enrollment") ~ "total_enrol",
str_detect(Demographic,"universities conferral") ~ "total_confer",
str_detect(Demographic,"mit enrollment") ~ "t3_mit_total_enrol",
str_detect(Demographic,"mit cs enrollment") ~ "t3_mit_cs_enrol",
str_detect(Demographic,"mellon enrollment") ~ "t3_mellon_total_enrol",
str_detect(Demographic,"carnegie mellon cs enrollment") ~ "t3_mellon_cs_enrol",
str_detect(Demographic,"stanford enrollment") ~ "t3_stanford_total_enrol",
str_detect(Demographic,"stanford cs enrollment") ~ "t3_stanford_cs_enrol",
str_detect(Demographic,"top three illinois universities cs 2021 conferral") ~ "t3_cs_confer",
str_detect(Demographic,"top three usa universities cs conferral") ~ "t3_cs_confer",
str_detect(Demographic,"top three usa universities cs conferral") ~ "t3_cs_confer",
str_detect(Demographic,"top three illinois universities cs 2022 enrollment") ~ "t3_cs_enrol",
# ap cs
str_detect(Demographic,"ap cs pass") ~ "apcs_pass",
str_detect(Demographic,"ap cs enrollment") ~ "apcs_enrol",
str_detect(Demographic,"ap cs enroll") ~ "apcs_enrol",
str_detect(Demographic,"ap cs scored 3 or 4 ") ~ "apcs_score34",
str_detect(Demographic,"ap cs scored 5") ~ "apcs_score5",
# cs
str_detect(Demographic,"offering cs") ~ "cs_classOffered",
str_detect(Demographic,"interest in cs") ~ "cs_interested",
str_detect(Demographic,"cs enrollment") ~ "cs_enrol",
str_detect(Demographic,"cs/computing enrollment") ~ "cs_enrol",
str_detect(Demographic,"cs 2022 enrollment") ~ "cs_enrol",
str_detect(Demographic,"cs 2021 conferral") ~ "cs_confer",
str_detect(Demographic,"cs degree conferral") ~ "cs_confer",
str_detect(Demographic,"cs conferral") ~ "cs_confer",
str_detect(Demographic,"computing conferral") ~ "cs_confer",
# k-8
str_detect(Demographic,"k-8 stem magnet school enrollment") ~ "mag_stem_enrol",
# hs
str_detect(Demographic,"magnet hs enrollment") ~ "mag_enrol",
str_detect(Demographic,"hs graduates") ~ "total_grad",
# sat
str_detect(Demographic,"sat exceeds") ~ "sat_math_exceeds",
str_detect(Demographic,"sat exceeds in math") ~ "sat_math_exceeds",
str_detect(Demographic,"sat benchmark") ~ "sat_bench",
str_detect(Demographic,"sat math bench mark ") ~ "sat_math_bench",
str_detect(Demographic,"sat meets and exceeds") ~ "sat_math_meet&exceeds",
# math
str_detect(Demographic,"advanced in math") ~ "math_advc",
str_detect(Demographic,"math advanced") ~ "math_advc",
str_detect(Demographic,"proficient in math") ~ "math_prof",
str_detect(Demographic,"math proficient and above") ~ "math_prof&abov",
str_detect(Demographic,"below basic in math") ~ "math_belowBasic",
str_detect(Demographic,"basic in math") ~ "math_basic",
# employment
str_detect(Demographic,"top 3 highest paying cs jobs") ~ "csjob_t3",
str_detect(Demographic,"employee demographics") ~ "csjob_t11",
str_detect(Demographic,"11 top tech jobs") ~ "csjob_t11",
str_detect(Demographic,"19-24 year olds in tech") ~ "csjob_t11_age19to24",
# internet
str_detect(Demographic,"aged 5-17 number of students without internet access") ~ "NOinternet_age5to17"
)
) %>%
# create educational stage
mutate(var_stage = case_when(str_detect(Demographic,"4th") ~ "k8_4th",
str_detect(Demographic,"5th-8th") ~ "k8_5to8th",
str_detect(Demographic,"8th") ~ "k8_8th",
str_detect(Demographic,"k-8") |
str_detect(Demographic,"5-17") ~ "k8_total",
str_detect(Demographic,"college") |
str_detect(Demographic,"universities") |
str_detect(Demographic,"degree") |
str_detect(Demographic,"carnegie mellon") |
str_detect(Demographic,"mit") |
str_detect(Demographic,"stanford") |
str_detect(Demographic,"computing") ~ "col",
str_detect(Demographic,"sat") |
str_detect(Demographic,"ap") |
str_detect(Demographic,"9th-12th") |
str_detect(Demographic,"hs") ~ "hs",
str_detect(Demographic,"employment") |
str_detect(Demographic,"employee") |
str_detect(Demographic,"jobs") |
str_detect(Demographic,"tech") ~ "emp")
) %>%
## Create scope var.
mutate(var_scope = case_when(
str_detect(Demographic,"mit") |
str_detect(Demographic,"stanford") |
str_detect(Demographic,"carnegie") ~ "college",
str_detect(Demographic,"msa") |
str_detect(Demographic,"employee") |
str_detect(Demographic,"19-24 year olds in tech workforce") ~ "region_chi_msa",
str_detect(Demographic,"cps") |
str_detect(Demographic,"in math") ~ "city_chi",
str_detect(Demographic,"illinois") |
str_detect(Demographic,"ap cs") |
str_detect(Demographic,"ibhe") |
str_detect(Demographic,"3 year cs/computing") ~ "state_il",
str_detect(Demographic,"usa") |
str_detect(Demographic,"number of students") ~ "usa"
)
) %>%
select(Demographic,var_yr,var_scope,var_stage,var_key,everything())
df_DEI_parametric_mutated <- df_DEI_parametric_lower %>%
## create var_dim
mutate(var_dim = case_when(
### proficiency
str_detect(Demographic,"scored 3") ~ "proficiency",
str_detect(Demographic,"proficient") ~ "proficiency",
str_detect(Demographic,"persistent") ~ "proficiency",
str_detect(Demographic,"conferral") ~ "proficiency",
str_detect(Demographic,"benchmark") ~ "proficiency",
str_detect(Demographic,"meets and exceeds") ~ "proficiency",
str_detect(Demographic,"employee demographics") ~ "proficiency"
### access
str_detect(Demographic,"enrollment") ~ "access",
df_DEI_parametric_mutated <- df_DEI_parametric_lower %>%
## create var_dim
mutate(var_dim = case_when(
### proficiency
str_detect(Demographic,"scored 3") ~ "proficiency",
str_detect(Demographic,"proficient") ~ "proficiency",
str_detect(Demographic,"persistent") ~ "proficiency",
str_detect(Demographic,"conferral") ~ "proficiency",
str_detect(Demographic,"benchmark") ~ "proficiency",
str_detect(Demographic,"meets and exceeds") ~ "proficiency",
str_detect(Demographic,"employee demographics") ~ "proficiency",
### access
str_detect(Demographic,"enrollment") ~ "access",
str_detect(Demographic,"enroll") ~ "access"
### excellence
str_detect(Demographic,"scored 5") ~ "excellence",
df_DEI_parametric_mutated <- df_DEI_parametric_lower %>%
## create var_dim
mutate(var_dim = case_when(
### proficiency
str_detect(Demographic,"scored 3") ~ "proficiency",
str_detect(Demographic,"proficient") ~ "proficiency",
str_detect(Demographic,"persistent") ~ "proficiency",
str_detect(Demographic,"conferral") ~ "proficiency",
str_detect(Demographic,"benchmark") ~ "proficiency",
str_detect(Demographic,"meets and exceeds") ~ "proficiency",
str_detect(Demographic,"employee demographics") ~ "proficiency",
### access
str_detect(Demographic,"enrollment") ~ "access",
str_detect(Demographic,"enroll") ~ "access",
### excellence
str_detect(Demographic,"scored 5") ~ "excellence",
str_detect(Demographic,"advanced") ~ "excellence",
str_detect(Demographic,"pass") ~ "excellence",
str_detect(Demographic,"top three") ~ "excellence",
str_detect(Demographic,"top") ~ "excellence",
str_detect(Demographic,"high") ~ "excellence",
str_detect(Demographic,"exceeds") ~ "excellence",
### access
str_detect(Demographic,"19-24") ~ "access",
str_detect(Demographic,"amazon survey") ~ "access",
str_detect(Demographic,"lack of internet access") ~ "access",
str_detect(Demographic,"number of students") ~ "access",
str_detect(Demographic,"amazon survey") ~ "access"
)
) %>%
mutate(var_dim = case_when(
## revision: three top school enrollment to excellence
str_detect(Demographic,"mit") ~ "excellence",
str_detect(Demographic,"stanford") ~ "excellence",
str_detect(Demographic,"carnegie") ~ "excellence",
TRUE ~ var_dim
)
) %>%
## create var_source
mutate(var_source = str_extract(Demographic,"(?<=\\().+?(?=\\))")
) %>%
## create new var for ethnic groups
mutate(Black_Hispanic = Black + Hispanic,
White_Asian = White + Asian) %>%
## create var_type
mutate(var_type = ifelse(All < 1,'prob','count')) %>%
## reorganize the order of cols for pivot_longer
select(All,Black_Hispanic,White_Asian,Black,Hispanic,White,Asian,everything())
View(df_DEI_parametric_mutated)
df_DEI_parametric_mutated <- df_DEI_parametric_lower %>%
## create var_dim
mutate(var_dim = case_when(
### proficiency
str_detect(Demographic,"scored 3") ~ "proficiency",
str_detect(Demographic,"proficient") ~ "proficiency",
str_detect(Demographic,"persistent") ~ "proficiency",
str_detect(Demographic,"conferral") ~ "proficiency",
str_detect(Demographic,"benchmark") ~ "proficiency",
str_detect(Demographic,"meets and exceeds") ~ "proficiency",
str_detect(Demographic,"employee demographics") ~ "proficiency",
### access
str_detect(Demographic,"enrollment") ~ "access",
str_detect(Demographic,"enroll") ~ "access",
### excellence
str_detect(Demographic,"scored 5") ~ "excellence",
str_detect(Demographic,"advanced") ~ "excellence",
str_detect(Demographic,"pass") ~ "excellence",
str_detect(Demographic,"top three") ~ "excellence",
str_detect(Demographic,"top") ~ "excellence",
str_detect(Demographic,"high") ~ "excellence",
str_detect(Demographic,"exceeds") ~ "excellence",
### access
str_detect(Demographic,"19-24") ~ "access",
str_detect(Demographic,"amazon survey") ~ "access",
str_detect(Demographic,"lack of internet access") ~ "access",
str_detect(Demographic,"number of students") ~ "access",
str_detect(Demographic,"amazon survey") ~ "access"
)
) %>%
mutate(var_dim = case_when(
## revision: three top school enrollment to excellence
str_detect(Demographic,"mit") ~ "excellence",
str_detect(Demographic,"stanford") ~ "excellence",
str_detect(Demographic,"carnegie") ~ "excellence",
TRUE ~ var_dim
)
) %>%
## create var_source
mutate(var_source = str_extract(Demographic,"(?<=\\().+?(?=\\))")
) %>%
## create new var for ethnic groups
mutate(Black_Hispanic = Black + Hispanic,
White_Asian = White + Asian) %>%
## create var_type
mutate(var_type = ifelse(All < 1,'prob','count')) %>%
## reorganize the order of cols for pivot_longer
select(All,Black_Hispanic,White_Asian,Black,Hispanic,White,Asian,var_dim,everything())
df_DEI_parametric_mutated <- df_DEI_parametric_lower %>%
## create var_dim
mutate(var_dim = case_when(
### excellence
str_detect(Demographic,"scored 5") ~ "excellence",
str_detect(Demographic,"advanced") ~ "excellence",
str_detect(Demographic,"pass") ~ "excellence",
str_detect(Demographic,"top three") ~ "excellence",
str_detect(Demographic,"top") ~ "excellence",
str_detect(Demographic,"high") ~ "excellence",
str_detect(Demographic,"exceeds") ~ "excellence",
### proficiency
str_detect(Demographic,"scored 3") ~ "proficiency",
str_detect(Demographic,"proficient") ~ "proficiency",
str_detect(Demographic,"persistent") ~ "proficiency",
str_detect(Demographic,"conferral") ~ "proficiency",
str_detect(Demographic,"benchmark") ~ "proficiency",
str_detect(Demographic,"meets and exceeds") ~ "proficiency",
str_detect(Demographic,"employee demographics") ~ "proficiency",
### access
str_detect(Demographic,"enrollment") ~ "access",
str_detect(Demographic,"enroll") ~ "access",
### access
str_detect(Demographic,"19-24") ~ "access",
str_detect(Demographic,"amazon survey") ~ "access",
str_detect(Demographic,"lack of internet access") ~ "access",
str_detect(Demographic,"number of students") ~ "access",
str_detect(Demographic,"amazon survey") ~ "access"
)
) %>%
mutate(var_dim = case_when(
## revision: three top school enrollment to excellence
str_detect(Demographic,"mit") ~ "excellence",
str_detect(Demographic,"stanford") ~ "excellence",
str_detect(Demographic,"carnegie") ~ "excellence",
TRUE ~ var_dim
)
) %>%
## create var_source
mutate(var_source = str_extract(Demographic,"(?<=\\().+?(?=\\))")
) %>%
## create new var for ethnic groups
mutate(Black_Hispanic = Black + Hispanic,
White_Asian = White + Asian) %>%
## create var_type
mutate(var_type = ifelse(All < 1,'prob','count')) %>%
## reorganize the order of cols for pivot_longer
select(All,Black_Hispanic,White_Asian,Black,Hispanic,White,Asian,var_dim,everything())
df_DEI_parametric_mutated_long <- df_DEI_parametric_mutated %>%
pivot_longer(1:7,names_to = "var_ethinc",values_to = "var_value") %>%
mutate(var_ethinc = tolower(var_ethinc))
df_DEI_parametric_tidy <- df_DEI_parametric_mutated_long
# write.csv(df_DEI_parametric_mutated_long,"E:/p33/P33-DEI-dashboard-project/df_DEI_parametric_tidy.csv", row.names = FALSE)
View(df_DEI_parametric_tidy)
View(df_DEI_parametric_mutated_long)
df_DEI_parametric_mutated <- df_DEI_parametric_label %>%
## create var_dim
mutate(var_dim = case_when(
### excellence
str_detect(Demographic,"scored 5") ~ "excellence",
str_detect(Demographic,"advanced") ~ "excellence",
str_detect(Demographic,"pass") ~ "excellence",
str_detect(Demographic,"top three") ~ "excellence",
str_detect(Demographic,"top") ~ "excellence",
str_detect(Demographic,"high") ~ "excellence",
str_detect(Demographic,"exceeds") ~ "excellence",
### proficiency
str_detect(Demographic,"scored 3") ~ "proficiency",
str_detect(Demographic,"proficient") ~ "proficiency",
str_detect(Demographic,"persistent") ~ "proficiency",
str_detect(Demographic,"conferral") ~ "proficiency",
str_detect(Demographic,"benchmark") ~ "proficiency",
str_detect(Demographic,"meets and exceeds") ~ "proficiency",
str_detect(Demographic,"employee demographics") ~ "proficiency",
### access
str_detect(Demographic,"enrollment") ~ "access",
str_detect(Demographic,"enroll") ~ "access",
### access
str_detect(Demographic,"19-24") ~ "access",
str_detect(Demographic,"amazon survey") ~ "access",
str_detect(Demographic,"lack of internet access") ~ "access",
str_detect(Demographic,"number of students") ~ "access",
str_detect(Demographic,"amazon survey") ~ "access"
)
) %>%
mutate(var_dim = case_when(
## revision: three top school enrollment to excellence
str_detect(Demographic,"mit") ~ "excellence",
str_detect(Demographic,"stanford") ~ "excellence",
str_detect(Demographic,"carnegie") ~ "excellence",
TRUE ~ var_dim
)
) %>%
## create var_source
mutate(var_source = str_extract(Demographic,"(?<=\\().+?(?=\\))")
) %>%
## create new var for ethnic groups
mutate(Black_Hispanic = Black + Hispanic,
White_Asian = White + Asian) %>%
## create var_type
mutate(var_type = ifelse(All < 1,'prob','count')) %>%
## reorganize the order of cols for pivot_longer
select(All,Black_Hispanic,White_Asian,Black,Hispanic,White,Asian,var_dim,everything())
View(df_DEI_parametric_mutated)
df_DEI_parametric_mutated_long <- df_DEI_parametric_mutated %>%
pivot_longer(1:7,names_to = "var_ethinc",values_to = "var_value") %>%
mutate(var_ethinc = tolower(var_ethinc))
df_DEI_parametric_tidy <- df_DEI_parametric_mutated_long
# write.csv(df_DEI_parametric_mutated_long,"E:/p33/P33-DEI-dashboard-project/df_DEI_parametric_tidy.csv", row.names = FALSE)
View(df_DEI_parametric_tidy)
library("tidyverse")
View(df_DEI_parametric_tidy)
library("dplyr")
library("tidyr")
library('ggfortify')
library('stargazer')
library('pscl')
